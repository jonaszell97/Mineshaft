
#version 400 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 3) in mat4 modelMatrix;
layout(location = 7) in int layer;

// Output data ; will be interpolated for each fragment.
out vec2 UV;
out vec3 textureDir;
flat out int texLayer;

// Values that stay constant for the whole mesh.
uniform mat4 viewProjectionMatrix;

void main()
{
   // Output position of the vertex, in clip space : MVP * position
   gl_Position = viewProjectionMatrix * modelMatrix * vec4(vertexPosition_modelspace, 1.0f);

   // UV of the vertex. No special space for this one.
   UV = vertexUV;
   textureDir = vertexPosition_modelspace;
   texLayer = layer;
}