
#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;

// Output data ; will be interpolated for each fragment.
out vec2 UV;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform float globalTime;

vec4 getWorldPos()
{
    vec3 inVert = vertexPosition_modelspace.xyz;
    inVert.y += sin((globalTime + inVert.x) * 1.5) / 16.6f;
    inVert.y += cos((globalTime + inVert.z) * 1.5) / 16.2f;
    inVert.y -= 0.4;
    return vec4(inVert, 1.0f);
}

void main()
{
   // Output position of the vertex, in clip space : MVP * position
   gl_Position =  MVP * getWorldPos();

   // UV of the vertex. No special space for this one.
   UV = vertexUV;
}

